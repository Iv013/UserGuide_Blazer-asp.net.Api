@page "/user"
@page "/user/{id:int}"
@inject IUserServices UserService
<PageTitle>UserGuide</PageTitle>

@if (Id==null){
    <PageTitle>UserGuide</PageTitle>
    <h3>Добавление  нового пользователя</h3>
}
else
{
    <PageTitle>Изменение данных пользователя @user.LastName</PageTitle>
    <h3>Изменение данных пользователя @user.LastName </h3>
}

<EditForm Model="user" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div>
    <label for="firstname">Имя</label>
        <InputText id="firstname" @bind-Value = "user.FirstName" class="form-control"></InputText> 
        <ValidationMessage For="@(() => user.FirstName)" />
    </div>
    <div>
    <label for="lastname">Фамилия</label>
        <InputText id="lastname" @bind-Value="user.LastName" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.LastName)" />
    </div>
    <div>
        <label for="patronymic">Отчество</label>
        <InputText id="patronymic" @bind-Value="user.Patronymic" class="form-control"></InputText>
    </div>
    <div>
        <label for="login">Домен\Логин</label>
        <InputText id="login" @bind-Value="user.UserLogin" class="form-control"></InputText>
        <ValidationMessage For="@(() => user.UserLogin)" />
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">@btnText</button>
@*    <ValidationSummary />*@
</EditForm>




@code {
    [Parameter]
    public int? Id  { get; set; }
    UserData user = new UserData();
    string btnText = string.Empty;

  
    protected override async Task OnInitializedAsync()
    {
        if (Id==null){
            btnText = "Создать";
        }else
        {
            btnText = "Изменить";
            user = await UserService.GetSingleUser((int)Id);
        }
    }
    async Task HandleSubmit()
    {
        if (Id == null){
            user.UserEnable = true;
            if (user.Patronymic == null) user.Patronymic = String.Empty;
            await UserService.CreateUser(user);
        } else{
            await UserService.UpdateUser(user);
        }
    }

}
